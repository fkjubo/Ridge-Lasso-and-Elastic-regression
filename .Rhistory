data <- read.csv("wiki4HE.csv", T, ",")
View(data)
data <- read.csv("wiki4HE.csv", T, ";")
View(data)
summary(data)
data$PhD <- as.factor(data$PhD)
data$UNIVERSITY <- as.factor(data$UNIVERSITY)
dummy <- dummyVars(~ ., data)
library(caret)
dummy <- dummyVars(~ ., data)
dummy.data <- predict(dummy, data)
preProcess <- preProcess(dummy.data, method = "bagImpute")
View(dummy.data)
preProcess <- preProcess(dummy.data, method = "knnImpute")
imputed <- predict(preProcess, dummy.data)
data1 <- imputed
data1
View(data1)
data <- read.csv("wiki4HE.csv", T, ";")
summary(data)
data <- data[,10]
data <- read.csv("wiki4HE.csv", T, ";")
data <- data[,1:10]
summary(data)
data$DOMAIN[data$DOMAIN == "?"] <- "1"
summary(data)
data$DOMAIN[data$DOMAIN == "?", "DOMAIN"] <- "1"
data$DOMAIN[data$DOMAIN == "?"] "DOMAIN" <- "1"
data$DOMAIN[data$DOMAIN == "?"] <- "1"
data$DOMAIN <- as.factor(data$DOMAIN)
summary(data)
data$PhD <- as.factor(data$PhD)
data$USERWIKI[data$USERWIKI == "?"] <- "0"
summary(data)
data$USERWIKI[data$USERWIKI == "?"] <- 0
summary(data)
data$DOMAIN[data$DOMAIN == "?"] <- 1
summary(data)
library(VIM)
data$OTHER_POSITION[data$OTHER_POSITION =="?"] <- NA
summary(data)
data$UOC_POSITION[data$UOC_POSITION == "?"] <- NA
data$OTHERSTATUS[data$OTHERSTATUS == "?"] <- NA
summary(data)
knn <- kNN(data, variable = c("UOC_POSITION",
"OTHER_POSITION",
"OTHERSTATUS"), k=5)
data <- predict(knn, data[,7:9])
knn
data <- knn[,1:10]
summary(data)
library(caTools)
set.seed(256)
split <- sample.split(data, SplitRatio = .75)
train <- subset(data, split == T)
test <- subset(data, split == F)
library(caret)
library(caret)
trainControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
model <- train(USERWIKI ~ .,
data= train,
method = "xgbTree",
trainControl <- trainControl)
trainControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 10)
model <- train(USERWIKI ~ .,
data <- train,
method <- "xgbTree",
trainControl <- trainControl)
model <- train(USERWIKI ~ .,
train,
method <- "xgbTree",
trainControl <- trainControl)
model <- train(USERWIKI ~ .,
train,
method <- "xgbTree",
trControl <- trainControl)
trainControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5)
model <- train(USERWIKI ~ .,
data = train,
method = "xgbTree",
trControl = trainControl)
install.packages("gdata")
library(gdata)
data$USERWIKI <- drop.levels(data$USERWIKI)
summary(data)
data$UOC_POSITION <- drop.levels(data$UOC_POSITION)
data$OTHER_POSITION <- drop.levels(data$OTHER_POSITION)
trainControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5)
model <- train(USERWIKI ~ .,
data = train,
method = "xgbTree",
trControl = trainControl)
summary(data)
library(caTools)
set.seed(256)
split <- sample.split(data, SplitRatio = .75)
train <- subset(data, split == T)
test <- subset(data, split == F)
trainControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5)
model <- train(USERWIKI ~ .,
data = train,
method = "xgbTree",
trControl = trainControl)
model
plot(model)
predict <- predict(model, test)
confusionMatrix(predict, test$USERWIKI)
trainControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5)
model <- train(USERWIKI ~ .,
data = train,
method = "rf",
trControl = trainControl)
predict <- predict(model, test)
confusionMatrix(predict, test$USERWIKI)
table(train$USERWIKI)
install.packages("ROSE")
library(ROSE)
over <- ovun.sample(USERWIKI~.,data = train, method = "over", N= 764)$data
table(over$USERWIKI)
confusionMatrix(predict, test$USERWIKI)
trainControl <- trainControl(method = "repeatedcv",
number = 10,
repeats = 5)
model <- train(USERWIKI ~ .,
data = over,
method = "rf",
trControl = trainControl)
predict <- predict(model, test)
confusionMatrix(predict, test$USERWIKI)
library(MASS)
data("Boston")
str(Boston)
summary(Boston)
Boston$chas <- as.factor(Boston$chas)
library(caTools)
library(caTools)
set.seed(564)
split <- sample.split(Boston, SplitRatio = .75)
train <- subset(Boston, split == T)
test <- subset(Boston, split == F)
library(caret)
View(train)
modelLR <- train(medv ~ .,
data= train,
method = "lm",
trControl = trainControl)
library(doParallel)
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
trainControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 6)
modelLR <- train(medv ~ .,
data= train,
method = "lm",
trControl = trainControl)
modelRR <- train(medv ~ .,
data= train,
method = "glmnet",
tuneGrid = expand.grid(alpha = 0,
lamda = seq(.0001,1,length = 5)),
trControl = trainControl)
library(glmnet)
library(doParallel)
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
trainControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 6)
modelLR <- train(medv ~ .,
data= train,
method = "lm",
trControl = trainControl)
modelRR <- train(medv ~ .,
data= train,
method = "glmnet",
tuneGrid = expand.grid(alpha = 0,
lamda = seq(.0001,1,length = 5)),
trControl = trainControl)
modelLSR <- train(medv ~ .,
data= train,
method = "gmnet",
tuneGrid = expand.grid(alpha = 1,
lamda = seq(.0001,1,length = 5)),
trControl = trainControl)
modelER <- train(medv ~ .,
data= train,
method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,length = 10),
lamda = seq(.0001,1,length = 5)),
trControl = trainControl)
stopCluster(cl)
library(doParallel)
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
trainControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 6)
modelLR <- train(medv ~ .,
data= train,
method = "lm",
trControl = trainControl)
modelRR <- train(medv ~ .,
data= train,
method = "glmnet",
tuneGrid = expand.grid(alpha = 0,
lamda = seq(.0001,1,length = 5)),
trControl = trainControl)
modelLSR <- train(medv ~ .,
data= train,
method = "glmnet",
tuneGrid = expand.grid(alpha = 1,
lamda = seq(.0001,1,length = 5)),
trControl = trainControl)
modelER <- train(medv ~ .,
data= train,
method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,length = 10),
lamda = seq(.0001,1,length = 5)),
trControl = trainControl)
stopCluster(cl)
library(doParallel)
cl <- makePSOCKcluster(2)
registerDoParallel(cl)
trainControl <- trainControl(method = 'repeatedcv',
number = 10,
repeats = 6)
modelLR <- train(medv ~ .,
data= train,
method = "lm",
trControl = trainControl)
modelRR <- train(medv ~ .,
data= train,
method = "glmnet",
tuneGrid = expand.grid(alpha = 0,
lambda = seq(.0001,1,length = 5)),
trControl = trainControl)
modelLSR <- train(medv ~ .,
data= train,
method = "glmnet",
tuneGrid = expand.grid(alpha = 1,
lambda = seq(.0001,1,length = 5)),
trControl = trainControl)
modelER <- train(medv ~ .,
data= train,
method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,length = 10),
lambda = seq(.0001,1,length = 5)),
trControl = trainControl)
stopCluster(cl)
modelLR
modelRR
modelLSR
modelER
library(keras)
modelER %>% evaluate(test, test$medv)
modelLR
summary(modelLR)
varImp(modelLR)
library(caret)
varImp(modelLR)
varImp(modelLR, scale = F)
plot(varImp(modelLR, scale = F))
plot(varImp(modelLR))
plot(varImp(modelLR, scale = F))
predictLR <- predict(modelLR, test)
confusionMatrix(predicted = predictLR, actual = test$medv)
str(test)
plot(predictLR)
plot(predictLR)
predictLR
plot(varImp(modelLR, scale = F))
summary(modelRR)
modelRR
plot(varImp(modelRR, scale = F))
plot(modelRR)
# prediction for the linear model
predictLR <- predict(modelRR, test)
plot(predictLR)
summary(modelLSR)
modelLSR
plot(varImp(modelLSR, scale = F))
plot(modelRR)
predictLSR <- predict(modelLSR, test)
plot(predictLR)
predictLSR <- predict(modelLSR, test)
plot(predictLSR)
predictRR <- predict(modelRR, test)
plot(predictRR)
predictLR <- predict(modelLR, test)
plot(predictLR)
summary(modelER)
modelER
plot(varImp(modelLSR, scale = F))
plot(modelRR)
predictER <- predict(modelLSR, test)
plot(predictER)
predictLR <- predict(modelLR, test)
plot(predictLR)
plot(modelLR$finalModel)
plot(modelRR$finalModel)
plot(modelRR$finalModel, xvar = 'lambda', label = T)
plot(modelRR$finalModel, xvar = 'dev', label = T)
plot(modelLSR$finalModel, xvar = 'lambda', label = T)
plot(modelLSR$finalModel, xvar = 'dev', label = T)
plot(modelLSR$finalModel, xvar = 'lambda', label = T)
plot(modelLSR$finalModel, xvar = 'dev', label = T)
plot(modelER)
modelER <- train(medv ~ .,
data= train,
method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,length = 10),
lambda = seq(.0001,.18,length = 5)),
trControl = trainControl)
plot(modelER)
modelER
modelER <- train(medv ~ .,
data= train,
method = "glmnet",
tuneGrid = expand.grid(alpha = seq(0,1,length = 10),
lambda = seq(.0001,1,length = 5)),
trControl = trainControl)
modelER
plot(modelER$finalModel, xvar = 'lambda', label = T)
plot(modelER$finalModel, xvar = 'dev', label = T)
